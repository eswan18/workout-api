-- Workout Types table

-- Create the table.
create table workout_types (
  id bigint generated by default as identity primary key,
  name text not null,
  notes text,
  parent_workout_type_id bigint references workout_types(id),
  owner_user_id uuid references auth.users,

  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  deleted_at timestamp with time zone
);

-- Set up Row Level Security (RLS).
alter table workout_types
  enable row level security;

-- Create a policy to allow the owner to update their own workout types.
create policy "Workout types are viewable by their owners." on workout_types
  for select using (auth.uid() = owner_user_id);
-- Create a policy to anyone to insert a workout type as long as it's owned by them.
create policy "Users can insert their own workout types." on workout_types
  for insert with check (auth.uid() = owner_user_id);
-- Create a policy to allow the owner to update their own workout types.
create policy "Users can update their own workout types." on workout_types
  for update using (auth.uid() = owner_user_id);
-- "Public" workouts (those without an owner) are viewable by everyone.
create policy "Public workout types are viewable by everyone." on workout_types
  for select using (owner_user_id is null);

-- This trigger will set the "updated_at" column to the current timestamp for every update.
create extension if not exists moddatetime schema extensions;
create trigger
  handle_updated_at before update
on workout_types
for each row execute
  procedure moddatetime(updated_at);